// 1st Sub-Action: set global "WHcommand" to %rawInput%
// 2nd Sub-Action: set global "user" to %user%

// Than Add this:
// Code for decoding keywords for writing to file
// Add this as own Execute Code Block in Sub-Actions

using System;
using System.Collections.Generic;

public class CPHInline
{
    // ===== PREFIX (adjustable) =====
    // adjust prefix for command here (keep it the same as in streamer.bot)
    private static readonly string Prefix = "!WH "; 

    // ===== STATIC COMMANDS =====
    private static readonly Dictionary<string, string> CommandMap = new(StringComparer.OrdinalIgnoreCase)
    {
        // Global shuffle commands
        { "shuffle", "global_shuffle" },
        { "shuffle_ai", "global_shuffle_ai" },

        // Random war
        { "random", "random_war_declaration" },

        // Corruption effects by faction
        { "nur", "nur_corruption_effect_all" },
        { "kho", "kho_corruption_effect_all" },
        { "sla", "sla_corruption_effect_all" },
        { "tze", "tze_corruption_effect_all" },
        { "skv", "skv_corruption_effect_all" },
        { "chs", "chs_corruption_effect_all" },
        { "vmp", "vmp_corruption_effect_all" },
        { "neu", "neu_corruption_effect_all" },

        // Bonuses / Maluses
        { "po_boni", "po_boni_effect_all" },
        { "po_mali", "po_mali_effect_all" },
        { "repl_boni", "repl_boni_effect_all" },
        { "repl_mali", "repl_mali_effect_all" },

        // Peak Fog of War effect
        { "peak10", "peak_10" },
        { "peak5", "peak_5" },
        { "peak2", "peak_2" },
        { "peak1", "peak_1" },
    };

    // ===== DYNAMIC COMMANDS =====
    private static readonly Dictionary<string, string> DynamicCommandMap = new(StringComparer.OrdinalIgnoreCase)
    {
        // Dynamic Commands -  change name here 
        // !!! Keep in mind that the !WH will still be infront even if not named here
        { "money", "toss_a_coin_{0}" },
        //{ "gold", "toss_a_coin_{0}" },    //Example for changing Command from: money to gold
        { "switcharoo", "switcharoo_{0}" },
        { "spawn_armies", "spawn_armies_{0}_{1}" },
        //{ "army", "spawn_armies_{0}_{1}" },    //Example for changing Command from: spawn_armies to army
    };

    // ===== Faction canonical keys + synonyms =====
    private static readonly Dictionary<string, string> FactionMap = new(StringComparer.OrdinalIgnoreCase)
    {
        // Faction keys - DONT CHANGE THEM
        { "grn", "grn" }, { "ogr", "ogr" }, { "bst", "bst" }, { "nor", "nor" }, { "skv", "skv" },
        { "def", "def" }, { "chs", "chs" }, { "chd", "chd" }, { "brt", "brt" }, { "cth", "cth" },
        { "wef", "wef" }, { "lzd", "lzd" }, { "hef", "hef" }, { "ksl", "ksl" }, { "dwf", "dwf" },
        { "emp", "emp" }, { "nur", "nur" }, { "kho", "kho" }, { "sla", "sla" }, { "tze", "tze" },
        { "vmp", "vmp" }, { "cst", "cst" }, { "tmb", "tmb" },

        // Synonyms - can add more if you want
        { "skaven", "skv" }, { "nurgle", "nur" },
        { "good", "god" }, { "chaos", "dem" },

        // Group keys - DONT CHANGE THEM
        { "dem", "dem" }, { "bad", "bad" }, { "ded", "ded" }, { "god", "god" },
        { "hmn", "hmn" }, { "elf", "elf" }, { "neu", "neu" }, { "any", "any" }
    };

    public bool Execute()
    {
        string raw = CPH.GetGlobalVar<string>("WHcommand", true);

        if (string.IsNullOrWhiteSpace(raw))
        {
            CPH.SetGlobalVar("WHcommand", "NOT", true);
            CPH.LogInfo("⚠️ WHcommand is empty or not set. Reset to 'NOT'.");
            return true;
        }

        // ===== REMOVE PREFIX =====
        string clean = raw.StartsWith(Prefix, StringComparison.OrdinalIgnoreCase)
            ? raw.Substring(Prefix.Length).Trim()
            : raw;

        // ===== STATIC COMMAND CHECK =====
        if (CommandMap.TryGetValue(clean.ToLower(), out string mappedStatic))
        {
            CPH.SetGlobalVar("WHcommand", mappedStatic, true); // save without prefix
            CPH.LogInfo($"✅ Static chat command '{raw}' mapped to '{mappedStatic}'");
            return true;
        }

        // ===== DYNAMIC COMMAND CHECK =====
        string dynamicCommand = HandleDynamicCommand(clean);
        if (!string.IsNullOrEmpty(dynamicCommand))
        {
            CPH.SetGlobalVar("WHcommand", dynamicCommand, true); // save without prefix
            CPH.LogInfo($"✅ Dynamic chat command '{raw}' mapped to '{dynamicCommand}'");
            return true;
        }

        // ===== INVALID COMMAND =====
        CPH.SetGlobalVar("WHcommand", "NOT", true);
        CPH.LogInfo($"❌ Invalid chat command '{raw}', WHcommand set to 'NOT'");
        return true;
    }

    private static string HandleDynamicCommand(string input)
    {
        if (string.IsNullOrWhiteSpace(input)) return null;

        string[] parts = input.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length == 0) return null;

        string keyword = parts[0].ToLower();
        if (!DynamicCommandMap.TryGetValue(keyword, out string template))
            return null;

        // ===== toss_a_coin =====
        if (template.StartsWith("toss_a_coin_") && parts.Length >= 2)
        {
            if (int.TryParse(parts[1], out int amount))
                return string.Format(template, amount);
        }

        // ===== switcharoo =====
        if (template.StartsWith("switcharoo_") && parts.Length >= 2)
        {
            if (int.TryParse(parts[1], out int number))
                return string.Format(template, number);
        }

        // ===== spawn_armies =====
        if (template.StartsWith("spawn_armies_") && parts.Length >= 3)
        {
            if (!int.TryParse(parts[parts.Length - 1], out int count)) return null;

            string factionRaw = parts[1].ToLower();
            if (!FactionMap.TryGetValue(factionRaw, out string mappedFaction))
                return null;

            return string.Format(template, mappedFaction, count);
        }

        return null;
    }
}

// Code for writing in Files
// Add this as own Execute Code Block in Sub-Actions (behind the above one)

using System;
using System.IO;

public class CPHInline
{
    // ===== Messages =====
    // Adjust as you want it
    // Success message
    private static readonly string SuccessMessageTemplate = "@{0} - SPbot {1} added to queue peepoClap";
    // Failure message (most likely typo)
    private static readonly string FailureMessageTemplate = "@{0} - BenderHeh No valid Command";

    // ===== Settings =====
    // Enable or disable failure messages
    private static readonly bool EnableFailureMessages = true;

    public bool Execute()
    {
        string user = CPH.GetGlobalVar<string>("user", true);
        string command = CPH.GetGlobalVar<string>("WHcommand", true);

        // Skip if empty or invalid command
        if (string.IsNullOrWhiteSpace(user) || string.IsNullOrWhiteSpace(command) || command.Equals("NOT", StringComparison.OrdinalIgnoreCase))
        {
            if (EnableFailureMessages && !string.IsNullOrWhiteSpace(user))
                CPH.SendMessage(string.Format(FailureMessageTemplate, user));
            return true;
        }

        // Adjust filepath to the ...\Total War WARHAMMER III\tdw_twitch_points_punishment.txt
        string filePath = @"D:\Games\Steam\steamapps\common\Total War WARHAMMER III\tdw_twitch_points_punishment.txt";
        string directory = Path.GetDirectoryName(filePath);

        try
        {
            if (!Directory.Exists(directory))
                Directory.CreateDirectory(directory);

            string line = $"{user}: {command}";
            File.AppendAllText(filePath, line + Environment.NewLine);

            // Send success message
            CPH.SendMessage(string.Format(SuccessMessageTemplate, user, command));
        }
        catch (Exception)
        {
            if (EnableFailureMessages && !string.IsNullOrWhiteSpace(user))
                CPH.SendMessage(string.Format(FailureMessageTemplate, user));
        }

        return true;
    }
}

